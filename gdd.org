#+title: Fallen Gods : Game Design Document

* Présentation

Fallen Gods est un jeu basé sur le gameplay de A Slight Chance of Sawblades,
c'est-à-dire un jeu d'arcade-action où le joueur contrôle un personnage devant
sauter au dessus de projectiles mortels tombant du ciel pour les détruire.

* Pourquoi en faire un dérivatif ?

J'ai beaucoup aimé ASCoS, mais j'ai été déçu de ne pas voir certaines mécaniques.

1. Il n'y a pas de récompense importante qui encourage à sauter au-dessus de
   plusieurs projectiles en un saut (les projectiles ne disparaissent qu'à
   l'atterrissage du personnage).
2. Il y a des trucs à ramasser, mais ils ne servent qu'à augmenter un timer qui
   limite la durée du jeu. Cette mécanique de timer est inutile (dumoins dans
   une utilisation normale du jeu), mais les trucs à ramasser sont
   satisfaisants et obligent le joueur à bouger (et leur apparition est
   multipliée en cas de combo !).
3. Peu de progression (uniquement cosmétique). Pas de vie en plus, pas de triple
   ou quadruple saut.

Donc voici les mécaniques que j'aimerai ajouter ou modifier :

- Une meilleure mécanique pour récompenser les combos.
- Des mécaniques à acheter dans un magasin.
  - Des sauts supplémentaires.
  - Des vies supplémentaires.
  - Autres ? Un dash ? Un dive ? Un TP ? Plein de moves, pour chaque run.
- Un objectif à battre, un boss-fight avec des patterns de shoot-em-up.

* Pitch narratif

*Fallen Gods*, un mini-roguelite d'arcade-action boss-rush, dans un monde
cyberpunk-post-fantasy-antique.

La fin des temps approche. La plupart des dieux sont morts, les quelques
derniers survivent grace à l'ancienne technologie, celle qui se nourrit de ce
qui reste de la planète.

Les uns après les autres, des héros se confrontent aux dieux déchus, mais cela
fait bien longtemps que l'espoir s'est eteint.

* Mécaniques

** Espace et déplacement

- Le joueur contrôle un personnage qui peut aller à droite, à gauche, et sauter.
- Il peut aussi double-sauter, triple-sauter, selon les améliorations que le joueur a choisi.
- Il évolue dans une zone de jeu rectangulaire, en hauteur, avec des limites solides.

** Projectiles

- Des projectiles tombent du haut de la zone de jeu.
- Elles rebondissent sur les murs et sur le sol.
- Elles sont mortelles au toucher pour le joueur.

** Interaction avec les projectiles

- Le joueur peut esquiver les projectiles, mais ils rebondissent sur le plafond.
- Le joueur peut les faire disparaitre en sautant par-dessus, puis en touchant le sol.

** Boucle : le saut (1 seconde)

- Esquiver les projectiles.
- Sauter au-dessus d'un ou plusieurs projectiles.
- Retomber sur le sol : des projectiles disparaissent.

** Boucle : la partie (1 minute)

- Détruire un projectile fait des dégats au boss, selon le nombre de projectiles détruits et le combo multiplicateur.
- Détruire plusieurs projectiles d'un coup fait augementer un compteur de combo multiplicateur.
- Chaque projectile détruits fait tomber un certain nombre de pièce, selon le combo et le nombre de projectiles détruits d'un coup.
- Toucher un projectile fait perdre une vie. Quand le joueur n'a plus de vie, c'est la fin de la partie.
- Le boss envoie des patterns de projectiles particuliers selon l'avancement du joueur.
- La partie se termine quand le joueur n'a plus de vie ou si le boss est battu (barre de vie vide).

** Boucle : la progression roguelite (1 heure)

- Avec l'argent accumulé, le joueur peut acheter des améliorations pour la partie suivante.
  - Des vies supplémentaires.
  - Des sauts supplémentaires.
  - Des double-sauts particuliers.
- Entre chaque parties, le joueur peut choisir d'équiper un double-saut particulier.
  - Chaque partie, un double-saut aléatoire appliquera un multiplicateur si il est choisi par le joueur.

Le personnage utilise l'ancienne technologie pour avoir des vies
supplémentaires. Ne pas l'utiliser est encouragé pour plusieurs points.
- Plus de pièces ?
- Fin alternative si 1 vie

* Sauts

- Position, velocity
- Acceleration from gravity

Projectile motion:
#+BEGIN_SRC latex
f(t) = 1/2gt^2 + v_0t + p_0$$
#+END_SRC

En entrée, on choisit h = height et t_h = jump_time

Vélocité initiale :
#+BEGIN_SRC latex
v_0 = 2h/t_h
#+END_SRC

Gravité :
#+BEGIN_SRC latex
g = -2h/t_h^2
#+END_SRC

* Todolist et milestones

** DONE Milestone 1 : boucle de saut

*** DONE [#A] Personnage
**** DONE Déplacement (input) :PROG:
**** DONE Saut (input) :PROG:
**** DONE Sprite :ASSET:
***** DONE Animation Idle :ASSET:
***** DONE Animation Course :ASSET:
***** DONE Animation Saut :ASSET:
***** DONE Animation Double-Saut :ASSET:
***** DONE Animation Mort :ASSET:
***** DONE Implementation Animation :PROG:
***** DONE Anim dynamique :PROG:
**** DONE [#A] SFX :ASSET:
***** DONE [#A] Implementation SFX :PROG:

*** DONE [#A] Projectiles
**** DONE Déplacement :PROG:
**** DONE Rebond :PROG:
**** DONE Apparition/Destruction :PROG:
**** DONE Sprite :ASSET:
**** DONE Animation :PROG:
***** DONE Transformations/modifications dynamiques :PROG:
***** DONE Pulsation :PROG:
***** DONE Destruction (particules ?) :PROG:
****** DONE Screen shake :PROG:
**** DONE [#A] SFX :ASSET:PROG:
**** DONE Patterns de spawn simple :PROG:

*** DONE [#A] Interaction personnage-projectile
**** DONE Toucher un projectile
***** DONE Animation Game Over
****** KILL Personnage Destruction (doublon) :ASSET:PROG:
****** DONE Animation reset level :ASSET:PROG:
****** DONE Reset du level :PROG:
***** DONE Implementation :PROG:
**** DONE [#A] Sauter au-dessus d'un projectile
***** DONE Animation Validation Saut :ASSET:PROG:
***** DONE [#A] SFX :ASSET:

*** DONE Interface
**** DONE Background :ASSET:
**** DONE Reset du niveau :PROG:


** TODO Milestone 2 : boucle de la partie

*** DONE Refactoring player :PROG:

*** TODO [#C] Interface :ASSET:PROG:
**** TODO [#C] Modules décoratifs :ASSET:
**** TODO [#C] Implem :PROG:

*** TODO [#C] Boss
**** DONE Barre de vie :PROG:ASSET:
***** DONE Interface dynamique :PROG:ASSET:
**** TODO [#C] Prise de dégat :PROG:ASSET:
***** TODO [#C] Animation dynamique :PROG:
***** TODO [#C] Portrait damaged :ASSET:
***** DONE [#A] SFX :ASSET:
***** DONE Clignotement :ASSET:PROG:
***** DONE Implem :PROG:
**** TODO [#C] Paliers de barre de vie :PROG:ASSET:
***** DONE [#B] Patterns selon le palier de barre de vie :PROG:
***** TODO [#C] Juice a la fin d'un palier :PROG:
**** TODO [#C] Boss battu
***** DONE [#A] Interface game over :ASSET:PROG:
***** TODO [#C] Cinématique de fin ? :ASSET:PROG:
***** DONE [#A] Animation dynamique :PROG:

*** TODO [#C] Combo multiplicateur
**** TODO [#C] Compteur :PROG:
**** TODO [#C] Augmentation lors des destructions multiples :PROG:
**** TODO [#C] Cassage de combo :PROG:
**** TODO [#C] Interface :ASSET:PROG:
***** TODO [#C] Sprite :ASSET:
***** TODO [#C] Animation dynamique :PROG:

*** TODO [#C] Pièces/collectables
**** TODO [#C] Génération par les projectiles :PROG:
***** DONE [#B] Calcul du nombre de pièces générées :PROG:
***** TODO [#C] Juice :ASSET:PROG:
**** TODO [#C] Ramassage :PROG:
***** TODO [#C] Juice :ASSET:PROG:
***** DONE Collision destruction
**** DONE [#B] Tracker global :PROG:
***** DONE [#B] Interface :ASSET:PROG:
***** DONE Resource inventaire

**** DONE [#B] Gravité, déplacement :PROG:
*** DONE [#A] Vies du personnage
**** DONE Player invuln :PROG:
**** DONE Game over :PROG:
**** DONE [#A] Prise de dégats :PROG:
***** DONE Juice :ASSET:PROG:
***** DONE [#A] SFX :ASSET:PROG:
***** DONE Implem :PROG:
**** DONE Interface :ASSET:PROG:


*** DONE [#B] Patterns de projectiles
**** DONE [#B] Génération roguelikesque :PROG:
***** DONE [#B] Abstraction sur les patterns :PROG:
Comme un donjon de roguelike, des pièces préfabriquées assemblées procéduralement.
**** DONE [#B] Augmentation de la difficulté :LEVEL:
***** DONE [#B] Patterns a difficulté variable :PROG:LEVEL:
***** DONE [#B] Vitesse variable :PROG:


** TODO Milestone 3 : la progression roguelike

*** TODO [#A] Musique :ASSET:

*** TODO Magasin
**** TODO Interface :PROG:ASSET:
**** TODO Acheter élément :PROG:

*** TODO Inventaire
**** TODO Équiper/Déséquiper :PROG:
**** TODO Interface :ASSET:PROG:

*** TODO Double-sauts :PROG:
**** TODO Dash :PROG:ASSET:
**** TODO TP :PROG:ASSET:
**** TODO Dive :PROG:ASSET:
**** TODO Avantage aléatoire sur un double-saut :PROG:

*** TODO Vies supplémentaires :PROG:
**** TODO Avantage à jouer avec moins de PV :PROG:

*** TODO Saut supplémentaires :PROG:
**** TODO Avantage à jouer avec moins de sauts :PROG:
